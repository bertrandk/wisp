void 0;
true;
1;
'Hello world';
'Hello,\nMy name is wisp!';
'a';
'keyword';
window.addEventListener('load', handler, false);
(foo || 0)['bar'];
[
    1,
    2,
    3,
    4
];
[
    1,
    2,
    3,
    4
];
({
    '1': 2,
    'foo': bar,
    'beep-bop': 'bop'
});
({
    a: 1,
    b: 2
});
foo(bar, baz);
dashDelimited();
isPredicate();
__privates__();
listToVector();
parseInt(x);
parseInt(x);
isArray(x);
isArray(x);
a + b;
a + b + c;
a - b;
a * b * c;
a / b;
a % b;
a === b;
isEqual(a, b);
isEqual(a, b, c);
a > b;
a >= b;
a < b && b < c;
a <= b && b <= c;
a && b;
a && b && c;
a || b;
(a || b) && (c && d);
var a = exports.a = void 0;
var b = exports.b = 2;
a = 1;
number < 10 ? 'Digit' : 'Number';
isMonday(today) ? 'How was your weekend' : void 0;
(function () {
    console.log('Computing sum of a & b');
    return a + b;
})();
(function () {
    return void 0;
})();
(function () {
    var aø1 = 1;
    var bø1 = aø1 + c;
    return aø1 + bø1;
}.call(this));
(function (x) {
    return x + 1;
});
(function increment(x) {
    return x + 1;
});
var incerement = exports.incerement = function incerement(x) {
        return x + 1;
    };
(function (x) {
    var rest = Array.prototype.slice.call(arguments, 1);
    return rest.reduce(function (sum, x) {
        return sum + x;
    }, x);
});
var sum = exports.sum = function sum() {
        switch (arguments.length) {
        case 0:
            return 0;
        case 1:
            var x = arguments[0];
            return x;
        case 2:
            var x = arguments[0];
            var y = arguments[1];
            return x + y;
        default:
            var x = arguments[0];
            var more = Array.prototype.slice.call(arguments, 1);
            return more.reduce(function (x, y) {
                return x + y;
            }, x);
        }
    };
(function () {
    switch (arguments.length) {
    case 1:
        var x = arguments[0];
        return x;
    case 2:
        var x = arguments[0];
        var y = arguments[1];
        return x - y;
    default:
        throw RangeError('Wrong number of arguments passed');
    }
});
new Type(options);
new Class(options);
console.log('hello wisp');
window.addEventListener('load', handler, false);
window.location;
(templates || 0)[element.id];
(function () {
    try {
        return raise(exception);
    } finally {
    }
})();
(function () {
    try {
        return raise(exception);
    } catch (error) {
        return console.log(error);
    }
})();
(function () {
    try {
        return raise(exception);
    } catch (error) {
        return recover(error);
    } finally {
        return console.log('That was a close one!');
    }
})();
(function raise(message) {
    return (function () {
        throw new Error(message);
    })();
});
foo;
symbol(void 0, 'foo');
symbol(void 0, 'foo');
symbol(void 0, 'foo');
'\ua789bar';
list(symbol(void 0, 'a'), symbol(void 0, 'b'));
var unlessFn = exports.unlessFn = function unlessFn(condition, body) {
        return condition ? void 0 : body;
    };
unlessFn(true, console.log('should not print'));
void 0;
true ? void 0 : console.log('should not print');
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar]));
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar], vec(bazs)));
list.apply(void 0, [symbol(void 0, 'foo')].concat([symbol(void 0, 'bar')]));
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar]));
list.apply(void 0, [symbol(void 0, 'foo')].concat([bar], vec(bazs)));
void 0;
var print = exports.print = function (message) {
        return console.log(message);
    };
void 0;
reduce(map(filter(open(tagret, 'keypress'), isEnterKey), getInputText), render);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leGFtcGxlcy9pbnRyby5qcyIsInNvdXJjZXMiOlsiLi9leGFtcGxlcy9pbnRyby53aXNwIl0sIm5hbWVzIjpbIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyIiwiZm9vIiwiYmFyIiwiYmF6IiwiZGFzaERlbGltaXRlZCIsImlzUHJlZGljYXRlIiwiX19wcml2YXRlc19fIiwibGlzdFRvVmVjdG9yIiwicGFyc2VJbnQiLCJ4IiwiaXNBcnJheSIsImEiLCJiIiwiYyIsImlzRXF1YWwiLCJkIiwibnVtYmVyIiwiaXNNb25kYXkiLCJ0b2RheSIsImNvbnNvbGUiLCJsb2ciLCJh+DEiLCJi+DEiLCJpbmNyZW1lbnQiLCJpbmNlcmVtZW50IiwicmVzdCIsInJlZHVjZSIsInN1bSIsInkiLCJtb3JlIiwib3B0aW9ucyIsIkNsYXNzIiwibG9jYXRpb24iLCJ0ZW1wbGF0ZXMiLCJlbGVtZW50IiwiaWQiLCJyYWlzZSIsImV4Y2VwdGlvbiIsImVycm9yIiwicmVjb3ZlciIsIm1lc3NhZ2UiLCJ1bmxlc3NGbiIsImNvbmRpdGlvbiIsImJvZHkiLCJiYXpzIiwicHJpbnQiLCJtYXAiLCJmaWx0ZXIiLCJvcGVuIiwidGFncmV0IiwiaXNFbnRlcktleSIsImdldElucHV0VGV4dCIsInJlbmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFDQSxNQUFBLENBQU9DLGdCQUFSLEMsTUFBQSxFQUErQkMsT0FBL0IsRSxLQUFBLEM7Q0FDTUMsRyxNQUFOLEMsS0FBQSxDO0FBQ0EsQ0FBQTtBQUFBLEksQ0FBQTtBQUFBLEksQ0FBQTtBQUFBLEksQ0FBQTtBQUFBLEksQ0FBQTtBQUFBLEM7QUFDQSxDQUFBO0FBQUEsSSxDQUFBO0FBQUEsSSxDQUFBO0FBQUEsSSxDQUFBO0FBQUEsSSxDQUFBO0FBQUEsQztDQUNBLENBQUE7QUFBQSxJLE1BQUE7QUFBQSxJLE9BQVFDLEdBQVI7QUFBQSxJLGlCQUFBO0FBQUEsQztDQUNBLENBQUE7QUFBQSxJLElBQUE7QUFBQSxJLElB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
